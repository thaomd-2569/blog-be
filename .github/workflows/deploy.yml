name: Deploy to Develop

on:
  push:
    branches:
    - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup SSH key for EC2 connection
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ${{ secrets.SSH_KEY_NAME }}
        chmod 600 ${{ secrets.SSH_KEY_NAME }}

    - name: Deploy to EC2
      run: |
        echo "Connecting to EC2 instance and deploying..."
        ssh -i ${{ secrets.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Connected to EC2 instance"
          echo "Current directory: $(pwd)"

          echo "Going to project directory: ${{ secrets.PROJECT_PATH }}"
          cd ${{ secrets.PROJECT_PATH }}
          echo "Now in directory: $(pwd)"

          echo "=== PULLING LATEST CHANGES ==="
          git fetch origin develop
          git checkout develop
          git pull

          echo "=== START DOCKER ==="
          sudo service docker start || true

          echo "=== STOPPING DOCKER CONTAINERS ==="
          docker-compose down || true
          docker system prune -f || true

          echo "=== CREATING .ENV FILE ==="
          cp .env.example .env

          echo "=== FETCHING AWS PARAMETERS ==="
          # Define parameter paths
          PARAM_PREFIX="/blog-app"

          # Get all parameters with the prefix
          aws ssm get-parameters-by-path \
            --path "$PARAM_PREFIX" \
            --recursive \
            --with-decryption \
            --query 'Parameters[*].[Name,Value]' \
            --output text > params.txt

          # Process each parameter and update .env file
          while IFS=$'\t' read -r name value; do
            # Extract the key name from the parameter path
            key=$(echo "$name" | sed "s|^$PARAM_PREFIX/||")

            # Escape special characters in value for sed
            escaped_value=$(echo "$value" | sed 's/[[\.*^$()+?{|]/\\&/g')

            # Update the .env file
            if grep -q "^${key}=" .env; then
              # Key exists, update it
              sed -i "s|^${key}=.*|${key}=${escaped_value}|" .env
              echo "Updated ${key}"
            else
              # Key doesn't exist, append it
              echo "${key}=${escaped_value}" >> .env
              echo "Added ${key}"
            fi
          done < params.txt

          # Clean up
          # rm params.txt
          echo "Environment variables updated successfully"

          echo "=== DISPLAYING .ENV FILE (MASKED) ==="
          echo "Current .env file contents (sensitive values masked):"
          sed 's/=.*/=***/' .env

          echo "=== STARTING DOCKER CONTAINERS ==="
          docker-compose -f docker-compose-deploy.yml up -d

          echo "=== WAITING FOR CONTAINERS ==="
          sleep 30
          docker-compose ps

          echo "=== INSTALLING COMPOSER DEPENDENCIES ==="
          docker-compose exec -T blog_be_app composer install --no-dev --optimize-autoloader

          echo "=== GENERATING APPLICATION KEY ==="
          docker-compose exec -T blog_be_app php artisan key:generate --force

          echo "=== DUMPING AUTOLOAD ==="
          docker-compose exec -T blog_be_app composer dump-autoload --optimize

          echo "=== RUNNING DATABASE MIGRATIONS ==="
          docker-compose exec -T blog_be_app php artisan migrate --force

          # echo "=== RUNNING DATABASE SEEDINGS ==="
          # docker-compose exec -T blog_be_app php artisan db:seed --force

          echo "=== CLEARING AND CACHING CONFIG ==="
          docker-compose exec -T blog_be_app php artisan optimize:clear

          echo "=== PERFORMING HEALTH CHECK ==="
          sleep 10

          # Health check
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt..."

            if curl -f http://localhost:${APP_PORT:-80}/health || curl -f http://localhost:${APP_PORT:-80}; then
              echo "Application is healthy!"
              break
            else
              echo "Health check failed, attempt $attempt/$max_attempts"
              if [ $attempt -eq $max_attempts ]; then
                echo "Health check failed after $max_attempts attempts"
                docker-compose logs blog_be_app
                exit 1
              fi
              sleep 10
              ((attempt++))
            fi
          done

          echo "=== FINAL CONTAINER STATUS ==="
          docker-compose ps

          echo "=== APPLICATION LOGS ==="
          docker-compose logs --tail=10 blog_be_app

          echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="
        EOF

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Deployment failed, showing logs for debugging..."
        ssh -i ${{ secrets.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.PROJECT_PATH }}
          echo "=== DEPLOYMENT FAILED - SHOWING LOGS ==="
          docker-compose logs
          docker-compose down
        EOF

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ${{ secrets.SSH_KEY_NAME }}
